// gist-data.js content - handles loading and saving data from/to GitHub Gist

const GIST_ID = 'your_gist_id_here'; // Replace with your Gist ID
const GIST_FILE = 'queries.json'; // Replace with your Gist filename
const GITHUB_TOKEN = 'your_github_token_here'; // Replace with your GitHub token (handle securely!)

async function loadQuestionsFromGist() {
    try {
        const response = await fetch(`https://api.github.com/gists/${GIST_ID}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        const content = data.files[GIST_FILE].content;
        const gistData = JSON.parse(content);

        setQuestions(gistData);

    } catch (error) {
        console.error('Error loading questions from Gist:', error);
        alert('Failed to load data from Gist. Check console for details.');
        // Fallback: initialize empty questions array
        setQuestions([]);
    }
}

async function saveQuestionsToGist(questions) {
    try {
        const response = await fetch(`https://api.github.com/gists/${GIST_ID}`, {
            method: 'PATCH',
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                files: {
                    [GIST_FILE]: {
                        content: JSON.stringify(questions, null, 2) // Pretty print JSON
                    }
                }
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        console.log('Questions saved to Gist successfully!');
    } catch (error) {
        console.error('Error saving questions to Gist:', error);
        alert('Failed to save data to Gist. Check console for details.');
    }
}

// --------------------------------------------------
// script.js content - main app logic

// Data and state
let questions = [];
let filteredQuestions = [];
let categories = [];
let timerInterval;
let timeLeft = 0;
let currentIndex = 0;
let correctAnswers = 0;
let timedOutCount = 0;
let answeredCount = 0;
let chosenDifficulty = 'easy';
let chosenCategory = 'All Categories';
let chosenNumQueries = 10;

let userResponses = [];
let startTime;
let totalTimeTaken = 0;

const difficultyTimes = {
    easy: 120,
    medium: 60,
    hard: 30,
    insane: 15,
    peaceful: null
};

// Called by gist-data.js after loading gist data
function setQuestions(newQuestions) {
    questions = newQuestions || [];
    initCategories();
    renderManageQueriesList();
}

function initCategories() {
    const catSet = new Set();
    questions.forEach(q => {
        if (q.category && q.category.trim() !== '') {
            catSet.add(q.category.trim());
        }
    });
    categories = Array.from(catSet).sort();
    if (categories.length === 0) {
        categories.push('Uncategorized');
    }
    populateCategorySelect();
    populateManageCategoryFilter();
}

function populateCategorySelect() {
    const select = document.getElementById('categorySelect');
    select.innerHTML = '';
    categories.forEach(cat => {
        const option = document.createElement('option');
        option.value = cat;
        option.textContent = cat;
        select.appendChild(option);
    });
    if (!select.value && categories.length) {
        select.value = categories[0];
    }
    hideNewCategoryInputArea();
}

function populateManageCategoryFilter() {
    const filter = document.getElementById('manageCategoryFilter');
    filter.innerHTML = '';
    const optAll = document.createElement('option');
    optAll.value = 'All Categories';
    optAll.textContent = 'All Categories';
    filter.appendChild(optAll);
    categories.forEach(cat => {
        const option = document.createElement('option');
        option.value = cat;
        option.textContent = cat;
        filter.appendChild(option);
    });
    filter.value = 'All Categories';
}

function populateCategoryOptions() {
    const select = document.getElementById('quizCategorySelect');
    select.innerHTML = '';

    const optAll = document.createElement('option');
    optAll.value = 'All Categories';
    optAll.textContent = 'All Categories';
    select.appendChild(optAll);

    categories.forEach(cat => {
        const option = document.createElement('option');
        option.value = cat;
        option.textContent = cat;
        select.appendChild(option);
    });
    select.value = 'All Categories';
}

function filterManageQueries() {
    renderManageQueriesList();
}

function showNewCategoryInputArea() {
    document.getElementById('newCategoryInputArea').style.display = 'flex';
    document.getElementById('categorySelect').style.display = 'none';
    document.getElementById('addCategoryBtn').style.display = 'none';
    document.getElementById('newCategoryInput').value = '';
    document.getElementById('newCategoryInput').focus();
}

function hideNewCategoryInputArea() {
    document.getElementById('newCategoryInputArea').style.display = 'none';
    document.getElementById('categorySelect').style.display = 'block';
    document.getElementById('addCategoryBtn').style.display = 'inline-block';
}

function showQuestionPopup() {
    document.getElementById('popupOverlay').style.display = 'block';
    document.getElementById('questionPopup').style.display = 'block';
    resetAddQueryFields();
    initCategories();
    clearEditMode();
}

function closeQuestionPopup() {
    document.getElementById('popupOverlay').style.display = 'none';
    document.getElementById('questionPopup').style.display = 'none';
    clearEditMode();
}

function resetAddQueryFields() {
    document.getElementById('newDateTime').value = '';
    document.getElementById('newQuestion').value = '';
    document.getElementById('newDescription').value = '';
    document.getElementById('newSideDescription').value = '';
    document.getElementById('questionType').value = 'open';
    showOptionFields();
    document.getElementById('newAnswerOpen').value = '';
    document.getElementById('newAnswer').value = '';
    hideNewCategoryInputArea();
    let yesNoBoxes = document.getElementsByName('yesnoAdd');
    for (let i = 0; i < yesNoBoxes.length; i++) {
        yesNoBoxes[i].checked = false;
    }
    let opts = document.querySelectorAll('.option-input');
    opts.forEach(input => input.value = '');
}

function showOptionFields() {
    const type = document.getElementById('questionType').value;
    document.getElementById('openAnswer').style.display = (type === 'open') ? 'block' : 'none';
    document.getElementById('yesNoAnswer').style.display = (type === 'yesno') ? 'block' : 'none';
    document.getElementById('multipleOptions').style.display = (type === 'multiple') ? 'block' : 'none';
}

function addNewCategory() {
    const input = document.getElementById('newCategoryInput');
    const newCat = input.value.trim();
    if (newCat === '') {
        alert('Please enter a category name.');
        input.focus();
        return;
    }
    if (categories.includes(newCat)) {
        alert('Category already exists.');
        input.focus();
        return;
    }
    categories.push(newCat);
    categories.sort();
    populateCategorySelect();
    populateManageCategoryFilter();
    const select = document.getElementById('categorySelect');
    select.value = newCat;
    hideNewCategoryInputArea();
}

function addQuestion() {
    let dt = document.getElementById('newDateTime').value;
    let questionText = document.getElementById('newQuestion').value.trim();
    let description = document.getElementById('newDescription').value.trim();
    let sideDescription = document.getElementById('newSideDescription').value.trim();

    let category;
    if (document.getElementById('newCategoryInputArea').style.display === 'flex') {
        category = document.getElementById('newCategoryInput').value.trim();
        if (!category) {
            alert("Please enter a category name or cancel.");
            return;
        }
    } else {
        let select = document.getElementById('categorySelect');
        category = select.value || 'Uncategorized';
    }

    let type = document.getElementById('questionType').value;

    if (!dt || !questionText) {
        alert("Please enter date/time and query text.");
        return;
    }
    if (!category) {
        alert("Please enter a category or fill it with 'Uncategorized'.");
        return;
    }

    if (!categories.includes(category)) {
        categories.push(category);
        categories.sort();
    }

    let correctAnswer;
    let options = [];

    if (type === 'open') {
        correctAnswer = document.getElementById('newAnswerOpen').value.trim();
        if (!correctAnswer) {
            alert("Please enter the correct answer.");
            return;
        }
    } else if (type === 'yesno') {
        let boxes = document.getElementsByName('yesnoAdd');
        correctAnswer = null;
        for (let i = 0; i < boxes.length; i++) {
            if (boxes[i].checked) {
                correctAnswer = boxes[i].value;
                break;
            }
        }
        if (!correctAnswer) {
            alert("Please select the correct answer (Yes, No, or Void).");
            return;
        }
    } else if (type === 'multiple') {
        const optionInputs = document.querySelectorAll('.option-input');
        options = [];
        optionInputs.forEach(inp => {
            if (inp.value.trim()) {
                options.push(inp.value.trim());
            }
        });
        if (options.length < 2) {
            alert("Please enter at least two options.");
            return;
        }
        correctAnswer = document.getElementById('newAnswer').value.trim();
        if (!correctAnswer) {
            alert("Please enter the correct answer.");
            return;
        }
        if (!options.includes(correctAnswer)) {
            alert("Correct answer must match one of the options.");
            return;
        }
    }

    const editIndex = getEditIndex();
    if (editIndex !== null) {
        // Update existing query
        questions[editIndex] = {
            datetime: dt,
            question: questionText,
            description: description,
            sideDescription: sideDescription,
            category: category,
            type: type,
            options: options,
            correctAnswer: correctAnswer
        };
    } else {
        // Add new query
        questions.push({
            datetime: dt,
            question: questionText,
            description: description,
            sideDescription: sideDescription,
            category: category,
            type: type,
            options: options,
            correctAnswer: correctAnswer
        });
    }

    saveQuestionsToGist(questions); // Save to gist instead of localStorage
    initCategories();

    alert("Query " + (editIndex !== null ? "updated" : "added") + "!");
    closeQuestionPopup();
}

function getEditIndex() {
    const val = document.getElementById('questionPopup').getAttribute('data-edit-index');
    if (val === '' || val === null) return null;
    const parsed = parseInt(val, 10);
    if (isNaN(parsed)) return null;
    return parsed;
}
function setEditIndex(index) {
    document.getElementById('questionPopup').setAttribute('data-edit-index', index);
    const btn = document.getElementById('addUpdateQuestionBtn');
    if (index !== null && index !== undefined) {
        btn.textContent = 'Update Query';
        document.getElementById('popupTitle').textContent = 'Edit Settlement Query';
    } else {
        btn.textContent = 'Add Query';
        document.getElementById('popupTitle').textContent = 'Add Settlement Query';
    }
}
function clearEditMode() {
    setEditIndex(null);
}

function editQuery(index) {
    const query = questions[index];
    if (!query) return;
    // Populate fields
    document.getElementById('newDateTime').value = query.datetime;
    document.getElementById('newQuestion').value = query.question;
    document.getElementById('newDescription').value = query.description;
    document.getElementById('newSideDescription').value = query.sideDescription;

    if (!categories.includes(query.category) && query.category) {
        categories.push(query.category);
        categories.sort();
        populateCategorySelect();
        populateManageCategoryFilter();
    }
    document.getElementById('categorySelect').value = query.category || '';

    document.getElementById('questionType').value = query.type;
    showOptionFields();

    if (query.type === 'open') {
        document.getElementById('newAnswerOpen').value = query.correctAnswer;
    } else if (query.type === 'yesno') {
        const boxes = document.getElementsByName('yesnoAdd');
        boxes.forEach(box => {
            box.checked = (box.value === query.correctAnswer);
        });
    } else if (query.type === 'multiple') {
        const optionInputs = document.querySelectorAll('.option-input');
        optionInputs.forEach((input, idx) => {
            input.value = query.options[idx] || '';
        });
        document.getElementById('newAnswer').value = query.correctAnswer;
    }

    document.getElementById('popupOverlay').style.display = 'block';
    document.getElementById('questionPopup').style.display = 'block';
    setEditIndex(index);
}

function showCategorySelector() {
    populateCategoryOptions();
    document.getElementById('categorySelectOverlay').style.display = 'flex';
}

function closeCategorySelector() {
    document.getElementById('categorySelectOverlay').style.display = 'none';
}

function showDifficultySelector() {
    const select = document.getElementById('quizCategorySelect');
    const selectedCat = select.value;
    if (!selectedCat) {
        alert('Please select a category.');
        return;
    }
    chosenCategory = selectedCat;
    closeCategorySelector();
    document.getElementById('difficultySelectOverlay').style.display = 'flex';
    // Set defaults for difficulty and query count dropdowns when opening
    const diffSelect = document.getElementById('quizDifficultySelect');
    const countSelect = document.getElementById('queryCountSelect');
    diffSelect.value = chosenDifficulty || 'easy';
    countSelect.value = chosenNumQueries || '10';
}

function closeDifficultySelector() {
    document.getElementById('difficultySelectOverlay').style.display = 'none';
}

function startQuiz() {
    const difficultySelect = document.getElementById('quizDifficultySelect');
    const selectedDiff = difficultySelect.value;
    if (!selectedDiff) {
        alert('Please select a difficulty.');
        return;
    }
    chosenDifficulty = selectedDiff;

    const queryCountSelect = document.getElementById('queryCountSelect');
    const selectedQueryCount = parseInt(queryCountSelect.value, 10);
    if (!selectedQueryCount || selectedQueryCount <= 0) {
        alert('Please select a valid number of queries.');
        return;
    }
    chosenNumQueries = selectedQueryCount;

    closeDifficultySelector();

    if (chosenCategory === 'All Categories') {
        filteredQuestions = questions.slice();
    } else {
        filteredQuestions = questions.filter(q => q.category === chosenCategory);
    }

    if (filteredQuestions.length === 0) {
        alert('No queries available for the selected category.');
        return;
    }

    // Limit questions count
    if (filteredQuestions.length > chosenNumQueries) {
        filteredQuestions = filteredQuestions.slice(0, chosenNumQueries);
    }

    currentIndex = 0;
    correctAnswers = 0;
    timedOutCount = 0;
    answeredCount = 0;
    userResponses = [];
    startTime = new Date();

    document.getElementById('homeScreen').style.display = 'none';
    document.getElementById('summary').style.display = 'none';
    document.getElementById('quizArea').style.display = 'block';

    showNextQuestion();
}

function showNextQuestion() {
    clearInterval(timerInterval);
    timeLeft = difficultyTimes[chosenDifficulty];
    if (timeLeft !== null) {
        updateTimerDisplay();
        timerInterval = setInterval(() => {
            timeLeft--;
            updateTimerDisplay();
            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                feedback('Time is up!', false);
                timedOutCount++;
                answeredCount++;
                userResponses.push({ question: filteredQuestions[currentIndex].question, correctAnswer: filteredQuestions[currentIndex].correctAnswer, userAnswer: null, timedOut: true });
                currentIndex++;
                setTimeout(() => {
                    if (currentIndex < filteredQuestions.length) {
                        showNextQuestion();
                    } else {
                        showSummary();
                    }
                }, 1500);
            }
        }, 1000);
    } else {
        document.getElementById('timer').textContent = '';
    }

    const q = filteredQuestions[currentIndex];
    document.getElementById('questionDate').textContent = new Date(q.datetime).toLocaleString();
    document.getElementById('quizQuestion').textContent = q.question;
    document.getElementById('questionDescription').textContent = q.description || '';

    document.getElementById('feedback').textContent = '';

    const quizInputArea = document.getElementById('quizInputArea');
    quizInputArea.innerHTML = '';

    const inputControlsDiv = document.createElement('div');
    inputControlsDiv.id = 'quizInputControls';

    const submitAndSideDescDiv = document.createElement('div');
    submitAndSideDescDiv.id = 'submitAndSideDescContainer';

    const sideDescDiv = document.createElement('div');
    sideDescDiv.id = 'questionSideDescription';

    if (q.sideDescription && q.sideDescription.trim() !== '') {
        sideDescDiv.style.display = 'block';
        sideDescDiv.textContent = q.sideDescription.trim();
    } else {
        sideDescDiv.style.display = 'none';
        sideDescDiv.textContent = '';
    }

    if (q.type === 'open') {
        const input = document.createElement('input');
        input.type = 'text';
        input.id = 'answerInput';
        input.placeholder = 'Your answer...';
        inputControlsDiv.appendChild(input);

        const submitBtn = document.createElement('button');
        submitBtn.textContent = 'Submit Answer';
        submitBtn.onclick = checkAnswer;

        submitAndSideDescDiv.appendChild(submitBtn);
        submitAndSideDescDiv.appendChild(sideDescDiv);

        inputControlsDiv.appendChild(submitAndSideDescDiv);

    } else if (q.type === 'yesno') {
        ['Yes', 'No', 'Void'].forEach(opt => {
            const label = document.createElement('label');
            label.className = 'checkbox-label';

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.name = 'yesnoAnswer';
            checkbox.value = opt;
            checkbox.addEventListener('change', (event) => {
                if (event.target.checked) {
                    const others = document.getElementsByName('yesnoAnswer');
                    others.forEach(cb => {
                        if (cb !== event.target) cb.checked = false;
                    });
                }
            });

            label.appendChild(checkbox);
            label.appendChild(document.createTextNode(opt));
            inputControlsDiv.appendChild(label);
        });

        const submitBtn = document.createElement('button');
        submitBtn.textContent = 'Submit Answer';
        submitBtn.onclick = checkAnswer;

        submitAndSideDescDiv.appendChild(submitBtn);
        submitAndSideDescDiv.appendChild(sideDescDiv);

        inputControlsDiv.appendChild(submitAndSideDescDiv);

    } else if (q.type === 'multiple') {
        q.options.forEach(opt => {
            const label = document.createElement('label');
            label.className = 'checkbox-label';

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.name = 'multipleAnswer';
            checkbox.value = opt;
            checkbox.addEventListener('change', (event) => {
                if (event.target.checked) {
                    const others = document.getElementsByName('multipleAnswer');
                    others.forEach(cb => {
                        if (cb !== event.target) cb.checked = false;
                    });
                }
            });

            label.appendChild(checkbox);
            label.appendChild(document.createTextNode(opt));
            inputControlsDiv.appendChild(label);
        });

        const submitBtn = document.createElement('button');
        submitBtn.textContent = 'Submit Answer';
        submitBtn.onclick = checkAnswer;

        submitAndSideDescDiv.appendChild(submitBtn);
        submitAndSideDescDiv.appendChild(sideDescDiv);

        inputControlsDiv.appendChild(submitAndSideDescDiv);
    }

    quizInputArea.appendChild(inputControlsDiv);
}

function updateTimerDisplay() {
    document.getElementById('timer').textContent = `Time Left: ${timeLeft} sec`;
}

function checkAnswer() {
    clearInterval(timerInterval);
    const q = filteredQuestions[currentIndex];
    let userAnswer = null;

    if (q.type === 'open') {
        userAnswer = document.getElementById('answerInput').value.trim();
    } else if (q.type === 'yesno') {
        const checkboxes = document.getElementsByName('yesnoAnswer');
        for (let cb of checkboxes) {
            if (cb.checked) {
                userAnswer = cb.value;
                break;
            }
        }
    } else if (q.type === 'multiple') {
        const checkboxes = document.getElementsByName('multipleAnswer');
        for (let cb of checkboxes) {
            if (cb.checked) {
                userAnswer = cb.value;
                break;
            }
        }
    }

    if (userAnswer === null || userAnswer === '') {
        alert('Please select or enter an answer before submitting.');
        if (timeLeft !== null) {
            timerInterval = setInterval(() => {
                timeLeft--;
                updateTimerDisplay();
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    feedback('Time is up!', false);
                    timedOutCount++;
                    answeredCount++;
                    userResponses.push({ question: q.question, correctAnswer: q.correctAnswer, userAnswer: null, timedOut: true });
                    currentIndex++;
                    setTimeout(() => {
                        if (currentIndex < filteredQuestions.length) {
                            showNextQuestion();
                        } else {
                            showSummary();
                        }
                    }, 1500);
                }
            }, 1000);
        }
        return;
    }

    const isCorrect = (userAnswer.toLowerCase() === q.correctAnswer.toLowerCase());

    if (isCorrect) {
        correctAnswers++;
    }
    answeredCount++;

    userResponses.push({ question: q.question, correctAnswer: q.correctAnswer, userAnswer: userAnswer, timedOut: false });

    feedback(isCorrect ? 'Correct!' : 'Incorrect!', isCorrect);

    currentIndex++;
    setTimeout(() => {
        if (currentIndex < filteredQuestions.length) {
            showNextQuestion();
        } else {
            showSummary();
        }
    }, 1500);
}

function feedback(msg, isCorrect) {
    const fb = document.getElementById('feedback');
    fb.textContent = msg;
    fb.style.color = isCorrect ? 'green' : 'red';
}

function showSummary() {
    document.getElementById('quizArea').style.display = 'none';
    const summaryDiv = document.getElementById('summary');
    summaryDiv.style.display = 'block';

    totalTimeTaken = (new Date() - startTime) / 1000; // seconds
    const averageTimePerQuestion = answeredCount > 0 ? (totalTimeTaken / answeredCount).toFixed(2) : 0;
    const percentageCorrect = (correctAnswers / answeredCount * 100).toFixed(2);

    let html = `<h3>Quiz Summary</h3>`;
    html += `<p>Total Queries: ${filteredQuestions.length}</p>`;
    html += `<p>Answered: ${answeredCount}</p>`;
    html += `<p>Correct Answers: ${correctAnswers}</p>`;
    html += `<p>Timed Out: ${timedOutCount}</p>`;
    html += `<p>Total Time Taken: ${totalTimeTaken} seconds</p>`;
    html += `<p>Average Time per Question: ${averageTimePerQuestion} seconds</p>`;
    html += `<p>Percentage Correct: ${percentageCorrect}%</p>`;

    const incorrects = userResponses.filter(r => !r.timedOut && (!r.userAnswer || r.userAnswer.toLowerCase() !== r.correctAnswer.toLowerCase()));
    if (incorrects.length > 0) {
        html += `<div id="incorrectList"><h4>Incorrect Answers:</h4>`;
        incorrects.forEach(inc => {
            html += `<div class="incorrect-item">
          <div class="incorrect-question">${inc.question}</div>
          <div>Your Answer: <span class="incorrect-user-answer">${inc.userAnswer || 'No answer'}</span></div>
          <div>Correct Answer: <span class="incorrect-correct-answer">${inc.correctAnswer}</span></div>
        </div>`;
        });
        html += `</div>`;
    }

    const timedOuts = userResponses.filter(r => r.timedOut);
    if (timedOuts.length > 0) {
        html += `<div id="timedOutList"><h4>Timed Out Questions:</h4>`;
        timedOuts.forEach(toq => {
            html += `<div class="incorrect-item">
          <div class="incorrect-question timedout-question">${toq.question}</div>
          <div><em>You did not answer this query in time.</em></div>
          <div>Correct Answer: <span class="incorrect-correct-answer">${toq.correctAnswer}</span></div>
        </div>`;
        });
        html += `</div>`;
    }

    if (userResponses.length > 0) {
        html += `<button id="exportExcelBtn" style="margin-top:15px;">Export All Answers to Excel</button>`;
    }

    html += `<button onclick="returnToHome()" style="margin-top:15px;">Return Home</button>`;

    summaryDiv.innerHTML = html;

    const btn = document.getElementById('exportExcelBtn');
    if (btn) {
        btn.addEventListener('click', exportAnswersExcel);
    }
}

// You can remove this export function if you do not want to use Excel export anymore.
function exportAnswersExcel() {
    alert("This feature requires external library which you must add yourself due to environment restrictions.");
}

function returnToHome() {
    document.getElementById('summary').style.display = 'none';
    document.getElementById('homeScreen').style.display = 'block';
}

function showManageQueries() {
    document.getElementById('manageQueriesOverlay').style.display = 'flex';
    populateManageCategoryFilter();
    document.getElementById('manageCategoryFilter').value = 'All Categories';
    renderManageQueriesList();
    const selectAllCheckbox = document.getElementById('selectAllCheckbox');
    if (selectAllCheckbox) selectAllCheckbox.checked = false;
}

function closeManageQueries() {
    document.getElementById('manageQueriesOverlay').style.display = 'none';
}

function renderManageQueriesList() {
    const listContainer = document.getElementById('manageQueriesList');
    listContainer.innerHTML = '';

    const selectedCategory = document.getElementById('manageCategoryFilter').value;

    let filteredList;
    if (selectedCategory === 'All Categories') {
        filteredList = questions;
    } else {
        filteredList = questions.filter(q => q.category === selectedCategory);
    }

    if (filteredList.length === 0) {
        listContainer.innerHTML = '<p>No queries found for this category.</p>';
        return;
    }

    filteredList.forEach((query, index) => {
        const originalIndex = questions.indexOf(query);
        const item = document.createElement('div');
        item.className = 'query-item';
        item.innerHTML = `
        <label class="checkbox-label" title="${query.question}">
          <input type="checkbox" class="query-checkbox" data-index="${originalIndex}" /> 
          <span class="query-question">${query.question}</span>
          <span class="query-date">${new Date(query.datetime).toLocaleString()}</span>
        </label>
        <button class="edit-btn" onclick="editQuery(${originalIndex})">Edit</button>
      `;
        listContainer.appendChild(item);
    });
}

function toggleSelectAll(selectAllCheckbox) {
    const checkboxes = document.querySelectorAll('.query-checkbox');
    checkboxes.forEach(checkbox => {
        checkbox.checked = selectAllCheckbox.checked;
    });
}

function removeSelectedQueries() {
    const checkboxes = document.querySelectorAll('.query-checkbox:checked');
    if (checkboxes.length === 0) {
        alert('Please select at least one query to remove.');
        return;
    }

    if (confirm('Are you sure you want to remove the selected queries?')) {
        // Sort indices descending so splice doesn't break index order
        const indicesToRemove = Array.from(checkboxes).map(cb => parseInt(cb.getAttribute('data-index'))).sort((a, b) => b - a);
        indicesToRemove.forEach(index => {
            questions.splice(index, 1);
        });
        saveQuestionsToGist(questions);
        initCategories();
        renderManageQueriesList();
        alert('Selected queries removed successfully.');
        const selectAllCheckbox = document.getElementById('selectAllCheckbox');
        if (selectAllCheckbox) selectAllCheckbox.checked = false;
    }
}

function removeSelectedCategory() {
    const filter = document.getElementById('manageCategoryFilter');
    const selectedCat = filter.value;
    if (selectedCat === 'All Categories') {
        alert('Cannot remove "All Categories"');
        return;
    }
    const hasQueries = questions.some(q => q.category === selectedCat);
    if (hasQueries) {
        alert('Cannot remove category that still contains queries. Remove queries first.');
        return;
    }
    const catIndex = categories.indexOf(selectedCat);
    if (catIndex !== -1) {
        if (confirm(`Are you sure you want to remove category "${selectedCat}"? This action cannot be undone.`)) {
            categories.splice(catIndex, 1);
            populateCategorySelect();
            populateManageCategoryFilter();
            alert(`Category "${selectedCat}" has been removed.`);
            renderManageQueriesList();
        }
    } else {
        alert('Category not found.');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    loadQuestionsFromGist();
    document.getElementById('addCategoryBtn').addEventListener('click', showNewCategoryInputArea);
    document.getElementById('cancelNewCategoryBtn').addEventListener('click', hideNewCategoryInputArea);
    document.getElementById('confirmNewCategoryBtn').addEventListener('click', addNewCategory);
    document.getElementById('newCategoryInput').addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            addNewCategory();
        }
    });
});
